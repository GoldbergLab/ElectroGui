%% This script takes a dbase made by electro_gui gets it ready for plotting VTA manuscript figures

clear

fold{1}='C:\Users\GoldbergLab\Dropbox\Vikram\MetaAnalysis\manuscript\dbases\VTA adromic\';
fold{2}='C:\Users\GoldbergLab\Dropbox\Vikram\MetaAnalysis\manuscript\dbases\VTA error\';
fold{3}='C:\Users\GoldbergLab\Dropbox\Vikram\MetaAnalysis\manuscript\dbases\VTA other dbases\';


for y=1:3
    contents=dir(fold{y});
    for i=3:length(contents);
        disp(['dbase no. ' num2str(i-2)])
        if strcmp(contents(i).name(end),'t');
            load([fold{y} contents(i).name]);
                       
            %set path for where the dbase file is located and make the
            %title field
            dbase.dbasePathNameRuidong=[fold{y} contents(i).name];
            
            dbase.title=contents(i).name;
            
            %{
            %Make the BirdID field
            ind_VTA = strfind(dbase.PathName, 'VTA');
            dbase.BirdID = dbase.PathName(ind_VTA+4:ind_VTA+7);
            
            %make the fdbksyll field
            BirdIDfdbksyll = {'2940' 'E';...
                '2995' 'D';...
                '2998' 'A';...
                '2951' 'C';...
                '2975' 'D';...
                '2116' 'D';...
                '2968' 'B';...
                '2965' 'E';...
                '2961' 'B';...
                '2810' 'B';...
                '2808' 'C';...
                '2894' 'E';...
                '2827' 'C';...
                '2854' 'C';...
                '2840' 'D';...
                '2866' 'A'};
            
            TF = strcmp(dbase.BirdID, BirdIDfdbksyll);
            ind_fdbk = find(TF(:,1));
            fdbksyll = BirdIDfdbksyll{ind_fdbk,2};
            dbase.fdbksyll = fdbksyll;
          
            %make the BirdIDMoveThresh field
            BirdIDMoveThresh =...
               {'2808'    0.0045;...
                '2840'    0.0043;...
                '2995'    0.0027;...
                '2968'    0.0054;...
                '2965'    0.0045;...
                '2961'    0.0047;...
                '2810'    0.0049;...
                '2940'    0.0048;...
                '2894'    0.0036;...
                '2827'    0.0044;...
                '2854'    0.0035;...
                '2866'    0.0051;...
                '2998'    0.0037;...
                '2951'    0.0051;...
                '2975'    0.0047;...
                '2116'    0.0078};
            
            TF = strcmp(dbase.BirdID, BirdIDMoveThresh);
            ind = find(TF(:,1));
            movethresh = BirdIDMoveThresh{ind,2};
            dbase.BirdIDMoveThresh = movethresh;
            
            % make microdirve position fields
            MicrodrivePosition =...
               {'2940' [0.6 2.2 5.5];...
                '2995' [0.6 2.7 5.3];...
                '2998' [0.65 3.0 5.3];...
                '2951' [0.6 2.8 5.5];...
                '2975' [0.6 3.0 5.5];...
                '2116' [0.6 2.8 5.4];...
                '2968' [0.6 2.4 5.5];...
                '2965' [0.6 2.4 5.15];...
                '2961' [0.63 2.4 5.13];...
                '2810' [0.6 2.4 5.35];...
                '2808' [0.6 2.8 5.55];...
                '2894' [0.85 2.0 5.73];...
                '2827' [0.85 2.2 5.5];...
                '2854' [0.85 3.0 5.65];...
                '2840' [0.6 2.6 5.58];...
                '2866' [0.6 2.6 5.65]};
            
            TF = strcmp(dbase.BirdID, MicrodrivePosition);
            ind_pos = find(TF(:,1));
            position = MicrodrivePosition{ind_pos,2};
            dbase.BirdIDMicrodriveImplantPostition = position;
            
            % make fields for electrode postion for each dbase
%             path_elecpos = 'C:\Users\GoldbergLab\Dropbox\Vikram\MetaAnalysis\manuscript\dbases\';
            path_elecpos = 'C:\Users\Admin\Dropbox\Vikram\MetaAnalysis\manuscript\dbases\';
            
            file_elecpos = 'ElectrodeDepth.mat';
            load([path_elecpos file_elecpos])
            
            TF = strcmp(dbase.title, ElectrodeDepth);
            ind_depth = find(TF(:,1));
            depth = ElectrodeDepth{ind_depth,2};
            dbase.Electrode.Depth = depth(1:2);
            dbase.Electrode.Penetration = depth(3);
            
            %initial analyses to extract eventTimes
            dbase=vgm_dbaseGetIndices(dbase);
            
            dbase=vgm_dbaseBoutNonsongISI(dbase,dbase.indx);
            
            [filestarttimes, fileendtimes, dbase.syllstarttimes, dbase.syllendtimes,...
                dbase.sylldurs, preintrvl, postintrvl, allintrvls, dbase.syllnames]...
                = vgm_dbaseGetSylls(dbase);
            dbase.filestarttimes=filestarttimes;
            dbase.fileendtimes=fileendtimes;
            dbase.allsyllnames=cell2mat(concatenate(dbase.syllnames));
            
            dbase = vgm_dbaseMakeBoutSylls(dbase);
 
            % get the spike waveform with dbase.thespike
            if isfield(dbase, 'thespike')
                dbase = rmfield(dbase, 'thespike');
            end
            bEliminateOutliers = 1;
            %the outliers code takes out all spikes for neuron 1
            %confirmed that it's OK to not eliminate outliers for file 18
            % the second case there is a small spike the preceds it
            if strcmp(dbase.title, 'dbase051315_7chan6_M_sl_nsr.mat') ||...
                    strcmp(dbase.title, 'dbase100814_2chan2_M_sl_nsr.mat')
                bEliminateOutliers = 0;
            end
            [dbase] = vg_dbasespikewidth(dbase, bEliminateOutliers);
            
            %Extract movement times
            dbase=vgm_dbaseGetMoveRasterNoPresort(dbase);
            
            %Fix extremely low movement offset to onset times
            dbase = vgm_fusedoublemoves(dbase);
            
            dbase = vgm_dbaseMakeBoutMoves(dbase);
            
            %spike train analyses
            lag=1.2;%Lag, in seconds, of how far out you want to plot
            bplot1=0; %if you want to plot the autocorr; 0 if you don't want to
            for binsize = [0.01 0.025 0.050]
                [dbase] = vgm_dbaseSpikeTrainAutocorrelation(dbase, lag, bplot1, binsize);
            end
            
            %infrastructure for error-related analyses -- below we define
            %medianfdbk time as zero
            dbase.allsyllstarts=concatenate(dbase.syllstarttimes);
            dbase.allsyllends=concatenate(dbase.syllendtimes);
            dbase.allsyllnames=concatenate(concatenate(dbase.syllnames));
            dbase.allfdbks=concatenate(dbase.fdbktimes);
            dbase.hitsyllstarts=dbase.allsyllstarts(find(dbase.allsyllnames==dbase.fdbksyll));%
            dbase.hitsyllends = dbase.allsyllends(find(dbase.allsyllnames==dbase.fdbksyll));
            dbase.catchsyllstarts=dbase.allsyllstarts(find(dbase.allsyllnames==lower(dbase.fdbksyll)));
            
            dbase.catchsyllends=dbase.allsyllends(find(dbase.allsyllnames==lower(dbase.fdbksyll)));
            
            d=[];
            cent = 0.025;
            for j=1:length(dbase.hitsyllstarts);
                ind_fdbk = find((dbase.allfdbks+cent)-dbase.hitsyllstarts(j) > 0 & (dbase.allfdbks+cent)-dbase.hitsyllends(j) < 0);
                if length(ind_fdbk) ~= 1
                    error(['check fdbktimes in ' dbase.title])
                end
                delay = dbase.allfdbks(ind_fdbk) - dbase.hitsyllstarts(j);
                d = [d delay];
            end
            dbase.fdbkdelays=d;%all of the fdbk delays relative to the hit syll onset (median of this value plus the syllonset time sets time '0' in the following analyses
            
            %}
            dbase.Zsyllstarts = dbase.allsyllstarts(dbase.allsyllnames == 'Z' | dbase.allsyllnames == 'z');
            dbase.Zsyllends = dbase.allsyllends(dbase.allsyllnames == 'Z' | dbase.allsyllnames == 'z');
            dZ=[];
            cent = 0.025;
            for j=1:length(dbase.Zsyllstarts);
                ind_Z = find((dbase.allfdbks+cent)-dbase.Zsyllstarts(j) > 0 & (dbase.allfdbks+cent)-dbase.Zsyllends(j) < 0);
                if length(ind_Z) ~= 1
                    error(['check Z times in ' dbase.title])
                end
                delayZ = dbase.allfdbks(ind_Z) - dbase.Zsyllstarts(j);
                dZ = [dZ delayZ];
            end
            dbase.Zfdbkdelays=dZ;%all of the fdbk delays relative to the hit syll onset (median of this value plus the syllonset time sets time '0' in the following analyses
            
                
                %{
             %only for error neurons
             if y == 1 || y == 2
            
                % to get bout isi excluding hit and esc times + 300 ms
                dbase = vgm_boutISInohitesc(dbase);
                
                % to get nonsong isi excluding Ztimes + 300 ms
                dbase = vgm_nonsongISInoZ(dbase);
                
                
                
                
                
                
                
                % get mishittimes
                dbase=vgm_dbasegetmishits(dbase);
                
                
                % stims and collisions analysis
                dbase = vgm_GetStimClips(dbase);
                
                
                
                % Burst Analysis
                if isfield(dbase, 'BurstAnalysis')
                    dbase = rmfield(dbase, 'BurstAnalysis');
                end
                
                dbase=vgm_BurstAnalysis(dbase, 5);
                
                
                
                
  
            end
           %} 
            
            % Hits and escapes midbout and endbouts
            dbase = vgm_dbaseMakeMidBoutEnd(dbase);
            
            % Hits and escapes with and without moves
            dbase = vgm_dbaseMakeMoveNoMove(dbase);
                
            % get the rate estimates by spike counting in random
            % windows
            dbase = vgm_getwinrates(dbase, 0.075);
            
            % make field historyanalysis
            if isfield(dbase,'historyanalysis')
                dbase = rmfield(dbase,'historyanalysis');
            end
            dbase = vgm_hithistory(dbase);
            
            
            
            %below get triginfos (raster data) for various events and
            %triggers
            if ~isfield(dbase,'stimtimes')
                dbase.stimtimes = [];
            end
            
            %below exlude any event that has filestarts, fileends, or stims within the xlim
            
            %To NOT exclude filestarttimes and fileendtimes that overlap
           
            filestarttimes = dbase.filestarttimes;
            fileendtimes = dbase.fileendtimes;
            ind_overlap = dbase.filestarttimes(2:end)-dbase.fileendtimes(1:end-1) > eps;
            ind_overlap_start = [true ind_overlap];
            ind_overlap_end = [ind_overlap true];
            filestarttimes_exclude = filestarttimes(ind_overlap_start);
            fileendtimes_exclude = fileendtimes(ind_overlap_end);
            
            %To NOT exclude boutstarts and boutends that overlap
            boutstarts = concatenate(dbase.boutstarts);
            boutends = concatenate(dbase.boutends);
            ind_overlap_bout = boutstarts(2:end)-boutends(1:end-1) > eps;
            ind_overlap_bout_start = [true ind_overlap_bout];
            ind_overlap_bout_end = [ind_overlap_bout true];
            boutstarts_exclude = boutstarts(ind_overlap_bout_start);
            boutends_exclude = boutends(ind_overlap_bout_end);

            exclude_default=sort([filestarttimes_exclude fileendtimes_exclude concatenate(dbase.stimtimes)]);
            Zstarttimes = dbase.allsyllstarts(dbase.allsyllnames == 'Z' | dbase.allsyllnames == 'z');
            
            %{
            %only for error neurons
            if y == 1 || y == 2
                binsize=.025;
                xl=1.05;%set xlimits binsize of PSTH (1.05 xlim will get replotted as [-1 1] later
                bplot=0;%change this to 1 if you want to plot each raster as yoyu are looping

                %Hits midbout
                clear trigger events exclude;
                trigger = dbase.hitsyllstarts_midbout+dbase.fdbkdelays_midbout;
                events = concatenate(dbase.spiketimes);
                exclude = exclude_default;
                dbase.trigInfoFhit_midbout = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                if ~isempty(dbase.trigInfoFhit_midbout.edges)
                    dbase.trigInfoFhit_midbout = vgm_MonteCarloFlex(dbase.trigInfoFhit_midbout);
                end
                
                %Hits that terminate bout
                clear trigger events exclude;
                trigger = dbase.hitsyllstarts_endbout+dbase.fdbkdelays_endbout;
                events = concatenate(dbase.spiketimes);
                exclude = exclude_default;
                dbase.trigInfoFhit_endbout = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                if ~isempty(dbase.trigInfoFhit_endbout.edges)
                    dbase.trigInfoFhit_endbout = vgm_MonteCarloFlex(dbase.trigInfoFhit_endbout);
                end
                
                %Catches midbout
                clear trigger events exclude;
                trigger = dbase.catchsyllstarts_midbout+median(dbase.fdbkdelays);
                events = concatenate(dbase.spiketimes);
                exclude = exclude_default;
                dbase.trigInfocatch_midbout = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                if ~isempty(dbase.trigInfocatch_midbout.edges)
                    dbase.trigInfocatch_midbout = vgm_MonteCarloFlex(dbase.trigInfocatch_midbout);
                end
                
                %Catches that terminate bout
                clear trigger events exclude;
                trigger = dbase.catchsyllstarts_endbout+median(dbase.fdbkdelays);
                events = concatenate(dbase.spiketimes);
                exclude = exclude_default;
                dbase.trigInfocatch_endbout = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                if ~isempty(dbase.trigInfocatch_endbout.edges)
                    dbase.trigInfocatch_endbout = vgm_MonteCarloFlex(dbase.trigInfocatch_endbout);
                end
                
            end
            
            binsize=.025;
            xl=1.05;%
            bplot=0;%

            %Hit syll spikes (time 0 is the time of the median fdbk)
            clear trigger events exclude;
            trigger = dbase.hitsyllstarts+median(dbase.fdbkdelays);
            events = concatenate(dbase.spiketimes);
            exclude = exclude_default;
            dbase.trigInfohitbin25 = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfohitbin25 = vgm_MonteCarloFlex(dbase.trigInfohitbin25);
            
            %Hit syll spikes (time 0 is the time of the actual fdbk)
            clear trigger events exclude;
            trigger = dbase.hitsyllstarts+dbase.fdbkdelays; % no median here
            events = concatenate(dbase.spiketimes);
            exclude = exclude_default;
            dbase.trigInfoFhitbin25 = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoFhitbin25 = vgm_MonteCarloFlex(dbase.trigInfoFhitbin25);
            
            %Catch syll spikes
            clear trigger events exclude;
            trigger = dbase.catchsyllstarts+median(dbase.fdbkdelays);
            events = concatenate(dbase.spiketimes);
            exclude = exclude_default;
            dbase.trigInfocatchbin25 = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfocatchbin25 = vgm_MonteCarloFlex(dbase.trigInfocatchbin25);
            
            %}
            

            %Z spikes
            if ~isempty(dbase.Zsyllstarts)
                binsize=.025;
                xl=1.025;%set xlimits binsize of PSTH (1.05 xlim will get replotted as [-1 1] later
                bplot=0;%change this to 1 if you want to plot each raster as yoyu are looping
                
                clear trigger events exclude;
                trigger = dbase.Zsyllstarts+dbase.Zfdbkdelays;
                events = concatenate(dbase.spiketimes);
                exclude = exclude_default;
                dbase.trigInfoZbin25 = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                dbase.trigInfoZbin25 = vgm_MonteCarloFlex(dbase.trigInfoZbin25);
            end
            
            %{
              
            dbase = vgm_dprime(dbase,1000);
            disp(['max: ' num2str(dbase.dprime.ptile_dprime_max)])
            disp(['min: ' num2str(dbase.dprime.ptile_dprime_min)])
            
            
                
            %only for error neurons
            if y == 1 || y == 2
                binsize=.025;
                xl=1.025;%set xlimits binsize of PSTH (1.05 xlim will get replotted as [-1 1] later
                bplot=0;%change this to 1 if you want to plot each raster as yoyu are looping
                
                %Hit sylls move onsets
                clear trigger events exclude;
                trigger=dbase.hitsyllstarts+dbase.fdbkdelays;
                events=concatenate(dbase.moveonsets);
                exclude=sort([exclude_default Zstarttimes]);
                dbase.trigInfomovehitbin25=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                
                %Catch sylls move onsets
                clear trigger events exclude;
                trigger=dbase.catchsyllstarts+median(dbase.fdbkdelays);
                events=concatenate(dbase.moveonsets);
                exclude=sort([exclude_default Zstarttimes]);
                dbase.trigInfomovecatchbin25=vgm_MakeTrigInfoFlex(trigger, events, exclude, dbase, bplot,xl,binsize);
            
                %Hit sylls move offsets
                clear trigger events exclude;
                trigger=dbase.hitsyllstarts+dbase.fdbkdelays;
                events=concatenate(dbase.moveoffsets);
                exclude=sort([exclude_default Zstarttimes]);
                dbase.trigInfomoveoffsetshitbin25=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
                
                %Catch sylls move onsets
                clear trigger events exclude;
                trigger=dbase.catchsyllstarts+median(dbase.fdbkdelays);
                events=concatenate(dbase.moveoffsets);
                exclude=sort([exclude_default Zstarttimes]);
                dbase.trigInfomoveoffsetscatchbin25=vgm_MakeTrigInfoFlex(trigger, events, exclude, dbase, bplot,xl,binsize);

            end
            
            
            
             
                
            
            %analysis for movement and syllable onset aligned spiking
            binsize=.025;
            xl = 1.05;
            bplot = 0;
            
            % 1. All movement onsets and offsets
            % Trigger: all movement onsets and offsets 
            % Events: spikes
            % Exclude: default + Z
            clear trigger events exclude;
            trigger=concatenate(dbase.moveonsets);
            events = concatenate(dbase.spiketimes);
            exclude=sort([exclude_default Zstarttimes]);
            dbase.trigInfoMoveOnsetsSpikes = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoMoveOnsetsSpikes = vgm_MonteCarloFlex(dbase.trigInfoMoveOnsetsSpikes);
            dbase.trigInfoMoveOnsetsSpikes = vgm_reliability(dbase,dbase.trigInfoMoveOnsetsSpikes,'all');
            trigger=concatenate(dbase.moveoffsets);
            dbase.trigInfoMoveOffsetsSpikes=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoMoveOffsetsSpikes = vgm_MonteCarloFlex(dbase.trigInfoMoveOffsetsSpikes);
            dbase.trigInfoMoveOffsetsSpikes = vgm_reliability(dbase,dbase.trigInfoMoveOffsetsSpikes,'all');
            
            % 2. Movement onsets and offsets outside song
            % Trigger: movement onsets and offsets 
            % Events: spikes
            % Exclude: default + Z + bout syll onsets and bout syll offsets
            clear trigger events exclude;
            trigger=concatenate(dbase.moveonsets);
            events = concatenate(dbase.spiketimes);
            exclude=sort([exclude_default Zstarttimes concatenate(dbase.boutsyllstarttimes) concatenate(dbase.boutsyllendtimes)]);
            dbase.trigInfoMoveOnsetsSpikesNoBoutSylls=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoMoveOnsetsSpikesNoBoutSylls = vgm_MonteCarloFlex(dbase.trigInfoMoveOnsetsSpikesNoBoutSylls);
            dbase.trigInfoMoveOnsetsSpikesNoBoutSylls = vgm_reliability(dbase,dbase.trigInfoMoveOnsetsSpikesNoBoutSylls,'silent');
            trigger=concatenate(dbase.moveoffsets);
            dbase.trigInfoMoveOffsetsSpikesNoBoutSylls=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoMoveOffsetsSpikesNoBoutSylls = vgm_MonteCarloFlex(dbase.trigInfoMoveOffsetsSpikesNoBoutSylls);
            dbase.trigInfoMoveOffsetsSpikesNoBoutSylls = vgm_reliability(dbase,dbase.trigInfoMoveOffsetsSpikesNoBoutSylls,'silent');
            
            % 3. Movement onsets and offset within song
            % Trigger: movement onsets and offsets
            % Events: spikes
            % default + Z
            clear trigger events exclude;
            trigger=concatenate(dbase.boutmoveonsets);
            events = concatenate(dbase.spiketimes);
            exclude = sort([exclude_default Zstarttimes]);
            dbase.trigInfoBoutMoveOnsetsSpikes=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutMoveOnsetsSpikes.edges)
                dbase.trigInfoBoutMoveOnsetsSpikes = vgm_MonteCarloFlex(dbase.trigInfoBoutMoveOnsetsSpikes);
                dbase.trigInfoBoutMoveOnsetsSpikes = vgm_reliability(dbase,dbase.trigInfoBoutMoveOnsetsSpikes,'bout');
            end
            trigger=concatenate(dbase.boutmoveoffsets);
            dbase.trigInfoBoutMoveOffsetsSpikes=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutMoveOffsetsSpikes.edges)
                dbase.trigInfoBoutMoveOffsetsSpikes = vgm_MonteCarloFlex(dbase.trigInfoBoutMoveOffsetsSpikes);
                dbase.trigInfoBoutMoveOffsetsSpikes = vgm_reliability(dbase,dbase.trigInfoBoutMoveOffsetsSpikes,'bout');
            end
            
            binsize=.025;
            xl = 0.325;
            bplot = 0;

            % 4. Movement onsets and offset within song no boutons and offs
            % Trigger: movement onsets and offsets
            % Events: spikes
            % Exclude: bout onsets and offsets
            % default + Z
            clear trigger events exclude;
            trigger=concatenate(dbase.boutmoveonsets);
            events = concatenate(dbase.spiketimes);
            exclude=sort([exclude_default Zstarttimes boutstarts_exclude boutends_exclude]);
            dbase.trigInfoBoutMoveOnsetsSpikesNoBoutStartsBoutEnds=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutMoveOnsetsSpikesNoBoutStartsBoutEnds.edges)
                dbase.trigInfoBoutMoveOnsetsSpikesNoBoutStartsBoutEnds = vgm_MonteCarloFlex(dbase.trigInfoBoutMoveOnsetsSpikesNoBoutStartsBoutEnds);
                dbase.trigInfoBoutMoveOnsetsSpikesNoBoutStartsBoutEnds = vgm_reliability(dbase,dbase.trigInfoBoutMoveOnsetsSpikesNoBoutStartsBoutEnds,'bout');
            end
            trigger=concatenate(dbase.boutmoveoffsets);
            dbase.trigInfoBoutMoveOffsetsSpikesNoBoutStartsBoutEnds=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutMoveOffsetsSpikesNoBoutStartsBoutEnds.edges)
                dbase.trigInfoBoutMoveOffsetsSpikesNoBoutStartsBoutEnds = vgm_MonteCarloFlex(dbase.trigInfoBoutMoveOffsetsSpikesNoBoutStartsBoutEnds);
                dbase.trigInfoBoutMoveOffsetsSpikesNoBoutStartsBoutEnds = vgm_reliability(dbase,dbase.trigInfoBoutMoveOffsetsSpikesNoBoutStartsBoutEnds,'bout');
            end
            
            binsize=.025;
            xl = 1.05;
            bplot = 0;
            
            % 5. Song syll onsets and offsets
            % Trigger: song syllable onsets and offsets
            % Events: spikes
            % Exclude: default + Z
            clear trigger events exclude;
            trigger=concatenate(dbase.boutsyllstarttimes);
            events = concatenate(dbase.spiketimes);
            exclude=[exclude_default Zstarttimes];
            dbase.trigInfoBoutSyllOnsetsSpikes=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoBoutSyllOnsetsSpikes = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOnsetsSpikes);
            dbase.trigInfoBoutSyllOnsetsSpikes = vgm_reliability(dbase,dbase.trigInfoBoutSyllOnsetsSpikes,'bout');
            trigger=concatenate(dbase.boutsyllendtimes);
            dbase.trigInfoBoutSyllOffsetsSpikes=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoBoutSyllOffsetsSpikes = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOffsetsSpikes);
            dbase.trigInfoBoutSyllOffsetsSpikes = vgm_reliability(dbase,dbase.trigInfoBoutSyllOffsetsSpikes,'bout');
            
            binsize=.025;
            xl = 0.325;
            bplot = 0;
            
            % 6. Song syll onsets and offsets no bout ons and offs 
            % Trigger: song syllable onsets and offsets 
            % Events: spikes
            % Exclude: default + Z start + bout onsets and offsets
            clear trigger events exclude;
            trigger=concatenate(dbase.boutsyllstarttimes);
            events = concatenate(dbase.spiketimes);
            exclude=[exclude_default Zstarttimes boutstarts_exclude boutends_exclude];
            dbase.trigInfoBoutSyllOnsetsSpikesNoBoutStartsBoutEnds=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoBoutSyllOnsetsSpikesNoBoutStartsBoutEnds = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOnsetsSpikesNoBoutStartsBoutEnds);
            dbase.trigInfoBoutSyllOnsetsSpikesNoBoutStartsBoutEnds = vgm_reliability(dbase,dbase.trigInfoBoutSyllOnsetsSpikesNoBoutStartsBoutEnds,'bout');
            trigger=concatenate(dbase.boutsyllendtimes);
            dbase.trigInfoBoutSyllOffsetsSpikesNoBoutStartsBoutEnds=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            dbase.trigInfoBoutSyllOffsetsSpikesNoBoutStartsBoutEnds = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOffsetsSpikesNoBoutStartsBoutEnds);
            dbase.trigInfoBoutSyllOffsetsSpikesNoBoutStartsBoutEnds = vgm_reliability(dbase,dbase.trigInfoBoutSyllOffsetsSpikesNoBoutStartsBoutEnds,'bout');
            
            binsize=.025;
            xl = 0.225;
            bplot = 0;
        
            % 7. Song syll onsets and offsets no movements
            % Trigger: song syllables onsets and offsets
            % Events: spikes
            % Exclude: default + Z + move onsets and offsets
            clear trigger events exclude;
            trigger=concatenate(dbase.boutsyllstarttimes);
            events = concatenate(dbase.spiketimes);
            exclude=sort([exclude_default Zstarttimes concatenate(dbase.moveonsets) concatenate(dbase.moveoffsets)]);
            dbase.trigInfoBoutSyllOnsetsSpikesNoMoves = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutSyllOnsetsSpikesNoMoves.edges)
                dbase.trigInfoBoutSyllOnsetsSpikesNoMoves = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOnsetsSpikesNoMoves);
                dbase.trigInfoBoutSyllOnsetsSpikesNoMoves = vgm_reliability(dbase,dbase.trigInfoBoutSyllOnsetsSpikesNoMoves,'bout');
            end
            trigger=concatenate(dbase.boutsyllendtimes);
            dbase.trigInfoBoutSyllOffsetsSpikesNoMoves=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutSyllOffsetsSpikesNoMoves.edges)
                dbase.trigInfoBoutSyllOffsetsSpikesNoMoves = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOffsetsSpikesNoMoves);
                dbase.trigInfoBoutSyllOffsetsSpikesNoMoves = vgm_reliability(dbase,dbase.trigInfoBoutSyllOffsetsSpikesNoMoves,'bout');
            end
            
            
            binsize=.025;
            xl = 0.225;
            bplot = 0;
            % 8. Song syll onsets and offsets no movements and no boutons
            % and offs
            % Trigger: song syllables onsets and offsets
            % Events: spikes
            % Exclude: default + Z + move onsets and offsets + bout onsets
            % and offsets
            clear trigger events exclude;
            trigger=concatenate(dbase.boutsyllstarttimes);
            events = concatenate(dbase.spiketimes);
            exclude=sort([exclude_default Zstarttimes concatenate(dbase.moveonsets) concatenate(dbase.moveoffsets) boutstarts_exclude boutends_exclude]);
            dbase.trigInfoBoutSyllOnsetsSpikesNoMovesBoutStartsBoutEnds=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutSyllOnsetsSpikesNoMovesBoutStartsBoutEnds.edges)
                dbase.trigInfoBoutSyllOnsetsSpikesNoMovesBoutStartsBoutEnds = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOnsetsSpikesNoMovesBoutStartsBoutEnds);
                dbase.trigInfoBoutSyllOnsetsSpikesNoMovesBoutStartsBoutEnds = vgm_reliability(dbase,dbase.trigInfoBoutSyllOnsetsSpikesNoMovesBoutStartsBoutEnds,'bout');
            end
            trigger=concatenate(dbase.boutsyllendtimes);
            dbase.trigInfoBoutSyllOffsetsSpikesNoMovesBoutStartsBoutEnds=vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
            if ~isempty(dbase.trigInfoBoutSyllOffsetsSpikesNoMovesBoutStartsBoutEnds.edges)
                dbase.trigInfoBoutSyllOffsetsSpikesNoMovesBoutStartsBoutEnds = vgm_MonteCarloFlex(dbase.trigInfoBoutSyllOffsetsSpikesNoMovesBoutStartsBoutEnds);
                dbase.trigInfoBoutSyllOffsetsSpikesNoMovesBoutStartsBoutEnds = vgm_reliability(dbase,dbase.trigInfoBoutSyllOffsetsSpikesNoMovesBoutStartsBoutEnds,'bout');
            end

            if y == 1 || y == 2
                alf = 'abcdefgh';
                dbase.motif = {alf(1:strfind(alf,lower(dbase.fdbksyll)))};
                dbase.fdbkmotif = {[alf(1:strfind(alf,lower(dbase.fdbksyll))-1) dbase.fdbksyll]};
                dbase = vgm_dbaseMakeTrigInfomotif(dbase,dbase.motif,dbase.fdbkmotif);
                dbase.trigInfomotif{1}.warped = vgm_MonteCarlo_t(dbase.trigInfomotif{1}.warped);
                dbase.trigInfomotif{1}.notwarped = vgm_MonteCarlo_t(dbase.trigInfomotif{1}.notwarped);
            end

              
            
                
                %only for error neurons
                if y == 1 || y == 2
                    %Z spikes no moves
                    binsize=.025;
                    xl=0.225;%set xlimits binsize of PSTH (1.05 xlim will get replotted as [-1 1] later
                    bplot=0;%change this to 1 if you want to plot each raster as yoyu are looping
                    
                    if ~strcmp(dbase.title, 'dbase102814_1chan2_ForAnalysis.mat')
                        clear trigger events exclude;
                        trigger = dbase.Zsyllstarts+dbase.Zfdbkdelays;
                        events = concatenate(dbase.spiketimes);
                        exclude = [exclude_default concatenate(dbase.moveonsets) concatenate(dbase.moveoffsets)];
                        dbase.trigInfoZNoMoves = vgm_MakeTrigInfoFlex(trigger, events, exclude,dbase, bplot,xl,binsize);
%                         dbase.trigInfoZNoMoves = vgm_MonteCarloFlex(dbase.trigInfoZNoMoves);
                    end
                
                end
              %}  
                
            save(dbase.dbasePathNameVikram,'dbase');
        end
        
    end
end














